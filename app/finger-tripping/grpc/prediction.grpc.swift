//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: prediction.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import Foundation
import SwiftGRPC
import SwiftProtobuf

internal protocol Prediction_PredictionServicePredictCall: ClientCallUnary {}

fileprivate final class Prediction_PredictionServicePredictCallBase: ClientCallUnaryBase<Prediction_PredictRequest, Prediction_PredictResponse>, Prediction_PredictionServicePredictCall {
  override class var method: String { return "/prediction.PredictionService/Predict" }
}


/// Instantiate Prediction_PredictionServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol Prediction_PredictionServiceService: ServiceClient {
  /// Synchronous. Unary.
  func predict(_ request: Prediction_PredictRequest, metadata customMetadata: Metadata) throws -> Prediction_PredictResponse
  /// Asynchronous. Unary.
  @discardableResult
  func predict(_ request: Prediction_PredictRequest, metadata customMetadata: Metadata, completion: @escaping (Prediction_PredictResponse?, CallResult) -> Void) throws -> Prediction_PredictionServicePredictCall

}

internal extension Prediction_PredictionServiceService {
  /// Synchronous. Unary.
  func predict(_ request: Prediction_PredictRequest) throws -> Prediction_PredictResponse {
    return try self.predict(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func predict(_ request: Prediction_PredictRequest, completion: @escaping (Prediction_PredictResponse?, CallResult) -> Void) throws -> Prediction_PredictionServicePredictCall {
    return try self.predict(request, metadata: self.metadata, completion: completion)
  }

}

internal final class Prediction_PredictionServiceServiceClient: ServiceClientBase, Prediction_PredictionServiceService {
  /// Synchronous. Unary.
  internal func predict(_ request: Prediction_PredictRequest, metadata customMetadata: Metadata) throws -> Prediction_PredictResponse {
    return try Prediction_PredictionServicePredictCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func predict(_ request: Prediction_PredictRequest, metadata customMetadata: Metadata, completion: @escaping (Prediction_PredictResponse?, CallResult) -> Void) throws -> Prediction_PredictionServicePredictCall {
    return try Prediction_PredictionServicePredictCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Prediction_PredictionServiceProvider: ServiceProvider {
  func predict(request: Prediction_PredictRequest, session: Prediction_PredictionServicePredictSession) throws -> Prediction_PredictResponse
}

extension Prediction_PredictionServiceProvider {
  internal var serviceName: String { return "prediction.PredictionService" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/prediction.PredictionService/Predict":
      return try Prediction_PredictionServicePredictSessionBase(
        handler: handler,
        providerBlock: { try self.predict(request: $0, session: $1 as! Prediction_PredictionServicePredictSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol Prediction_PredictionServicePredictSession: ServerSessionUnary {}

fileprivate final class Prediction_PredictionServicePredictSessionBase: ServerSessionUnaryBase<Prediction_PredictRequest, Prediction_PredictResponse>, Prediction_PredictionServicePredictSession {}

